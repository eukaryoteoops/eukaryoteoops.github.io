<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.NetCore on Tony 的開發隨筆</title>
    <link>/tags/.netcore/</link>
    <description>Recent content in .NetCore on Tony 的開發隨筆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 17 Aug 2019 08:33:56 +0800</lastBuildDate>
    
	<atom:link href="/tags/.netcore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[.NetCore] Swagger設定</title>
      <link>/posts/2019/08/netcore_swagger/</link>
      <pubDate>Sat, 17 Aug 2019 08:33:56 +0800</pubDate>
      
      <guid>/posts/2019/08/netcore_swagger/</guid>
      <description>Swagger 是讓你方便建立符合API規範的說明文件工具，以下將介紹如何在.Net Core的專案下使用Swagger
透過Nuget安裝 Swashbuckle.AspNetCore 在 Startup 加入設定 public void ConfigureServices(IServiceCollection services) { services.AddSwaggerGen(c =&amp;gt; { //Tag是拿來分類actions，預設的tag是controller name，可以在此修改想要的分類方式 c.TagActionsBy((apiDesc) =&amp;gt; $&amp;quot;{apiDesc.ActionDescriptor.RouteValues[&amp;quot;controller&amp;quot;]}_{apiDesc.HttpMethod}&amp;quot;); //此排序方式非字面上可以排序每個Actions，因為Swagger的文件架構會以path當作分組的依據，此排序只能生效在同一組path裡面 c.OrderActionsBy(api =&amp;gt; api.HttpMethod); //忽略含有[Obsolete]的Actions c.IgnoreObsoleteActions(); //忽略含有[Obsolete]的Properties c.IgnoreObsoleteProperties(); //將Enum轉為文字顯示於介面上，而非數字。 c.DescribeAllEnumsAsStrings(); //若專案內有不同namespace相同名稱的class，此方法可顯示絕對路徑的class name c.CustomSchemaIds(type =&amp;gt; type.FullName); //加入xml，完善API的說明 c.IncludeXmlComments(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &amp;quot;Api.xml&amp;quot;)); //可以自訂義operation的一些參數，像是在有[Authorized]的operation上加上填寫token的欄位 c.OperationFilter&amp;lt;SwaggerAuthFilter&amp;gt;(); c.SwaggerDoc(&amp;quot;v1&amp;quot;, new Info { Title = &amp;quot;Project&amp;quot;, Version = &amp;quot;v1&amp;quot; }); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.UseSwagger(); app.UseSwaggerUI(opt =&amp;gt; { opt.SwaggerEndpoint(&amp;quot;/swagger/v1/swagger.json&amp;quot;, &amp;quot;v1.0.0&amp;quot;); //摺疊所有分類 opt.DocExpansion(DocExpansion.None); //顯示此要求花費的時長 opt.</description>
    </item>
    
    <item>
      <title>Net面試題</title>
      <link>/posts/2019/08/netcore_startup/</link>
      <pubDate>Fri, 16 Aug 2019 16:13:11 +0800</pubDate>
      
      <guid>/posts/2019/08/netcore_startup/</guid>
      <description>.Net interview String &amp;amp; string  string 為 String 的別名，兩者在Compile上並無差別 繼承時，必須使用別名  Stack &amp;amp; Heap  stack 為靜態配置，不同執行緒使用不同stack heap 為動態配置，不同執行緒使用相同heap  Reference type &amp;amp; Value type  String is Reference type Value type use stack only Reference type use Stack as variable address but point to object in Heap  ref &amp;amp; out  ref 需要在執行前初始化參數(給值) out 是在程式結束前需要初始化參數(給值) ref 可以看成 y 指向 i，所以y的操作就都是在改i
int i = 5; Func(ref i); //i = 10 public void Func (int y){ y = 10 }   reference type with ref stack &amp;amp; heap pic</description>
    </item>
    
  </channel>
</rss>